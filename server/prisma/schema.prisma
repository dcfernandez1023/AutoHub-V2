generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id         String @id @default(uuid())
  username   String @unique
  email      String @unique
  password   String
  role       Role   @default(USER)
  registered Int    @default(0)

  Vehicle              Vehicle[]
  attachments          VehicleAttachment[]
  VehicleShare         VehicleShare[]
  VehicleChangelog     VehicleChangelog[]
  ScheduledServiceType ScheduledServiceType[]

  ScheduledServiceInstance ScheduledServiceInstance[]

  ScheduledLog ScheduledLog[]

  RepairLog RepairLog[]

  Changelog Changelog[]
}

model Vehicle {
  id           String  @id @default(uuid())
  userId       String
  name         String
  mileage      Int
  year         Int
  make         String
  model        String
  licensePlate String
  vin          String
  notes        String
  dateCreated  BigInt
  base64Image  String?

  // Relation with User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments              VehicleAttachment[]
  VehicleShare             VehicleShare[]
  VehicleChangelog         VehicleChangelog[]
  ScheduledServiceInstance ScheduledServiceInstance[]
  ScheduledLog             ScheduledLog[]
  RepairLog                RepairLog[]

  @@index([userId])
}

model VehicleAttachment {
  id          String   @id @default(uuid())
  vehicleId   String
  userId      String
  filename    String
  path        String
  contentType String
  size        Float
  dateCreated DateTime @default(now())

  user    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle                @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  file    VehicleAttachmentFile?

  @@index([vehicleId])
  @@index([userId])
}

model VehicleAttachmentFile {
  attachmentId String @id
  contents     Bytes

  vehicleAttachment VehicleAttachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
}

model VehicleShare {
  id        String @id @default(uuid())
  vehicleId String
  userId    String

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, userId]) // Prevent duplicate shares
  @@index([userId])
  @@index([vehicleId])
}

model VehicleChangelog {
  id          String   @id @default(uuid())
  vehicleId   String
  userId      String
  description String
  dateCreated DateTime @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vehicleId])
}

model Changelog {
  id          String   @id @default(uuid())
  userId      String
  description String
  dateCreated DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ScheduledServiceType {
  id     String @id @default(uuid())
  userId String
  name   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  ScheduledServiceInstance ScheduledServiceInstance[]

  @@unique([userId, name]) // Prevents duplicate names for a user's scheduled service types
  @@index([userId])
}

model ScheduledServiceInstance {
  id                     String    @id @default(uuid())
  userId                 String
  vehicleId              String
  scheduledServiceTypeId String
  mileInterval           Int
  timeInterval           Int
  timeUnits              TimeUnits

  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle              Vehicle              @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  scheduledServiceType ScheduledServiceType @relation(fields: [scheduledServiceTypeId], references: [id], onDelete: Cascade)
  ScheduledLog         ScheduledLog[]

  @@unique([vehicleId, scheduledServiceTypeId]) // Only one ScheduledServiceInstance can be created for a single Vehicle and ScheduledServiceType
  @@index([userId])
  @@index([vehicleId])
  @@index([scheduledServiceTypeId])
}

model ScheduledLog {
  id                         String   @id @default(uuid())
  userId                     String
  vehicleId                  String
  scheduledServiceInstanceId String
  datePerformed              DateTime @default(now())
  mileage                    Int
  partsCost                  Int
  laborCost                  Int
  totalCost                  Int
  notes                      String

  user                     User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle                  Vehicle                  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  scheduledServiceInstance ScheduledServiceInstance @relation(fields: [scheduledServiceInstanceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vehicleId])
  @@index([scheduledServiceInstanceId])
}

model RepairLog {
  id            String   @id @default(uuid())
  userId        String
  vehicleId     String
  datePerformed DateTime @default(now())
  name          String
  mileage       Int
  partsCost     Int
  laborCost     Int
  totalCost     Int
  notes         String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vehicleId])
}

model AppLog {
  id        String      @id @default(uuid())
  timestamp DateTime    @default(now())
  userId    String
  event     String
  duration  Int         @default(0)
  level     AppLogLevel
  data      String      @db.Text
}

enum Role {
  USER
  ADMIN
}

enum TimeUnits {
  DAY
  WEEK
  MONTH
  YEAR
}

enum AppLogLevel {
  INFO
  DEBUG
  WARNING
  ERROR
}
